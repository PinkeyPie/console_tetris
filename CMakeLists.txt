cmake_minimum_required(VERSION 3.24)
project(console_tetris C)

set(CMAKE_C_STANDARD 11)
set(CURSES TRUE)

MACRO(SCAN_FILES return_list input_dir extension)
    FILE(GLOB_RECURSE new_list RELATIVE ${input_dir} ${input_dir}/*${extension})
    SET(files_list "")
    FOREACH (file_path ${new_list})
        LIST(APPEND files_list ${input_dir}/${file_path})
    ENDFOREACH ()
    LIST(REMOVE_DUPLICATES files_list)
    SET(${return_list} ${files_list})
ENDMACRO()
MACRO(SRC_FILE_LIST result current_dir extension)
    FILE(GLOB children RELATIVE ${current_dir} ${current_dir}/*${extension})
    SET(src_list "")
    FOREACH (child ${children})
        LIST(APPEND src_list ${current_dir}/${child})
    ENDFOREACH ()
    LIST(REMOVE_DUPLICATES src_list)
    SET(${result} ${src_list})
ENDMACRO()
MACRO(ADD_SOURCE_DIRECTORY SOURCES HEADERS SCAN_DIRS)
    FOREACH(DIR ${SCAN_DIRS})
        file(GLOB SRC_TEMP "${DIR}/*.cpp" "${DIR}/*.c" "${DIR}/*.cc")
        file(GLOB HDR_TEMP "${DIR}/*.h" "${DIR}/*.hh" "${DIR}/*.hpp")
        LIST(APPEND ${SOURCES} ${SRC_TEMP})
        LIST(APPEND ${HEADERS} ${HDR_TEMP})
    ENDFOREACH(DIR)
ENDMACRO(ADD_SOURCE_DIRECTORY)
MACRO(SRC_FILES return_list current_dir)
    SRC_FILE_LIST(${return_list} ${current_dir} .c)
ENDMACRO()
MACRO(HEADER_FILES return_list current_dir)
    SRC_FILE_LIST(${return_list} ${current_dir} .h)
ENDMACRO()

set(SHARED_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/libs/Shared)
set(COLLECTIONS_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/libs/Collections)
set(STRING_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/libs/String)
set(TETRIS_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/game)

SRC_FILES(COLLECTIONS_SRC ${COLLECTIONS_SRC_DIR})
SRC_FILES(STRING_SRC ${STRING_SRC_DIR})
SRC_FILES(TETRIS_SRC ${TETRIS_SRC_DIR})

if (WIN32)
    HEADER_FILES(COLLECTIONS_HEADERS ${COLLECTIONS_SRC_DIR})
    add_library(collections SHARED ${COLLECTIONS_SRC} ${COLLECTION_HEADERS})
    target_compile_definitions(collections PRIVATE COLLECTION_LIBRARY)
else ()
    add_library(collections SHARED ${COLLECTIONS_SRC})
endif ()
target_include_directories(collections PUBLIC ${SHARED_DIR})

if (WIN32)
    HEADER_FILES(STRING_HEADERS ${STRING_SRC_DIR})
    add_library(string SHARED ${STRING_SRC} ${STRING_HEADERS})
    target_compile_definitions(string PRIVATE STRING_LIBRARY)
else ()
    add_library(string SHARED ${STRING_SRC})
endif ()
target_link_libraries(string PRIVATE collections)
target_include_directories(string PUBLIC ${SHARED_DIR} PRIVATE ${COLLECTIONS_SRC_DIR})

if (NOT WIN32)
    find_package(X11)
    if(${X11_FOUND} AND NOT ${CURSES})
        message("X11 used")
        set(DRAW_SRC "")
        SRC_FILES(DRAW_SRC ${TETRIS_SRC_DIR}/X11)
        add_executable(tetris ${TETRIS_SRC} ${DRAW_SRC})
        target_link_libraries(tetris PRIVATE ${X11_LIBRARIES})
        target_include_directories(tetris PRIVATE ${X11_INCLUDE_DIR})
    else ()
        message(STATUS "Curses used as GUI framework")
#        find_package(Curses REQUIRED)
#        message(STATUS ${CURSES_LIBRARY})
#        message(STATUS ${CURSES_INCLUDE_DIR})
#        message("Curses debug end")
        set(DRAW_SRC "")
        SRC_FILES(DRAW_SRC ${TETRIS_SRC_DIR}/Curses)
        add_executable(tetris ${TETRIS_SRC} ${DRAW_SRC})
#        set(CURSES_OPTIONS "-lncurses;-lpanel")
#        target_compile_options(tetris PUBLIC "$<$<CONFIG:DEBUG>:${CURSES_OPTIONS}>")
#        target_compile_options(tetris PUBLIC "$<$<CONFIG:RELEASE>:${CURSES_OPTIONS}>")
        #target_compile_options(tetris PUBLIC "-lncurses;-lpanel")
        target_compile_definitions(tetris PRIVATE CURSES_LIB)
        target_link_libraries(tetris PRIVATE ncurses panel)
        target_include_directories(tetris PRIVATE ${CURSES_INCLUDE_DIR})
    endif ()
endif ()

target_link_libraries(tetris PRIVATE collections PRIVATE string)
target_include_directories(tetris PRIVATE ${COLLECTIONS_SRC_DIR} PRIVATE ${STRING_SRC_DIR} PUBLIC ${SHARED_DIR})